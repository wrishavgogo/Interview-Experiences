import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/*
You are given an m x n binary matrix image where 0 represents a white pixel and 1 represents a black pixel.

The black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.

Given two integers x and y that represents the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.

You must write an algorithm with less than O(mn) runtime complexity

Input: image = 
[
["0","0","1","0"],
["0","1","1","0"],
["0","1","0","0"]
],
x = 0, y = 2
Output: 6
Example 2:

Input: image = [["1"]], x = 0, y = 0
Output: 1                              ------------------
                    --------------------

                        
x , y  ------------------
                --------------------------
                                ----------------
*/

public class Solution {

    static int addNumbers(int a, int b) {
        return a+b; 
    }

    public static void main(String[] args) {
        
        
        int[][] image = {{0,1,0,0},
                        {0,0,0,0},
                        {0,0,0,0}};
        
        

        int x = 0;
        int y = 1;
        
        int n = image.length;
        int m = image[0].length ;
        
        
        int rightCol = y;
        
        
        int lo = y;
        int hi = m - 1;
        
        
        while(lo <= hi ) {
            
            int mid = (lo + hi) / 2;
            
            int found = 0;
            for(int i = 0 ; i < n ; i ++ ) {
                if(image[i][mid] == 1 ) {
                    found = 1;
                    break;
                }
            }
            
            if(found == 1 ) {
                rightCol = mid;
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        
        
        int leftCol = y;
        
        lo = 0;
        hi = y;
        
        while(lo <= hi ) {
            
            int mid = (lo + hi)/2;
            
            int found = 0;
            for(int i = 0 ; i < n ; i ++ ) {
                if(image[i][mid] == 1 ) {
                    found = 1;
                    break;
                }
            }
            
            if(found == 1 ) {
                leftCol = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
         }
         
         int top = x;
         
         
         lo = 0;
         hi = x;
         
         while(lo <= hi ) {
            
            int mid = (lo + hi)/2;
            int found = 0;
            for(int j = 0 ; j < m ; j ++ ) {
                if(image[mid][j] == 1 ) {
                    found  = 1;
                    break;
                }
            }
            
            if(found == 1 ) {
                top = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
         }
         
         int bottom = x;
         
         lo = x;
         hi = n - 1;
         
         while(lo <= hi ) {
            
            int mid = (lo + hi)/2;
            int found = 0;
            for(int j = 0 ; j < m ; j ++ ) {
                if(image[mid][j] == 1 ) {
                    found  = 1;
                    break;
                }
            }
            
            if(found == 1 ) {
                bottom = mid;
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
         }
         
         int len = rightCol - leftCol + 1;
         int width = bottom - top + 1;
         
         
         System.out.println(top);
         System.out.println(bottom);
         System.out.println(rightCol);
         System.out.println(leftCol);
        
       
        

        
        System.out.println(len * width);
    }
    
    
}
