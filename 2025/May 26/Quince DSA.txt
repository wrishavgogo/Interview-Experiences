Search in a 2D matrix, the number in the matrix are sorted.
* Each row is sorted in ascending order.
* The first integer of each row is greater than the last integer of the previous row.



Input: matrix = [
        [2, 4, 5, 9],
        [10,12,19,21],
        [29,40,64,80]], target = 9

Output: true

Input: matrix = [
        [2, 4, 5, 9],
        [10,12,19,21],
        [29,40,64,80]], target = 15

Output: false

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    public static void main(String[] args) {
        
        int[][] matrix1 = {
        {2, 4, 5, 9},
        {10,12,19,21},
        {29,40,64,80}};
    

        
        System.out.println(findElement(matrix1 , 29));

        
    }
    
    public static boolean findElement(int[][] matrix , int target ) {
        
        int n = matrix.length;
        int m = matrix[0].length;
        
        
        int[] lastColumn = new int[n];
        
        for(int i = 0 ; i < n ; i ++ ) {
            
            lastColumn[i] = matrix[i][m-1];
        }
        
        int rowNumber = findRowNumber(lastColumn , target );
        
        if(rowNumber == -1 ) {
            
            return false;
        }
        
        
        int lo = 0;
        int hi = m - 1;
        
        
        while(lo <= hi ) {
            
            int mid = (lo + hi)/2;
            
            if(matrix[rowNumber][mid] ==  target) {
                
                return true;
            }
            
            
            if(matrix[rowNumber][mid] > target ) {
                hi = mid - 1;
            } 
            else {
                lo = mid + 1;
            }
            
        }
        
        
        
        return false;
        
        
        
    }
    
    
    
    private static int findRowNumber(int[] lastColumn  , int target ) {
        
        
        int n = lastColumn.length;
        
        int lo = 0;
        int hi = n - 1;
        
        int pos = -1;
        
        while(lo <= hi ) {
            
            int mid = (lo + hi) / 2;
            
            if(lastColumn[mid] >= target ) {
                pos = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        
        return pos;
    } 
    
    
}


time O(log(n) + log(m))
space O(n)








You are given a list of words and an integer k, return the k most occurring words in descending order.

Input: ["hello", "world", "ice", "hello", "hello", "rock", "world"] k = 2
Output: ["hello", "world"]

Input: ["hello"] k = 1
Output: ["hello"]




// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;

class Main {
    public static void main(String[] args) {
        
        
        String[] input =  {"hello", "world", "ice", "hello", "hello", "rock", "world"};
        int k = 10;
        
        
        List<String> ans = getTopK(input , k);
        
        for(int i = 0 ; i < ans.size() ; i ++ ) {
            System.out.println(ans.get(i));
        }
        
    }
    
    static class WordFreq {
        
        String word;
        int frequency;
        
        public WordFreq(String word ,int frequency) {
            
            this.word = word;
            this.frequency = frequency;
        }
    }
    
    
    
    public static List<String> getTopK(String[] input , int k ) {
        
        
        PriorityQueue<WordFreq> minPq = new PriorityQueue<WordFreq>((WordFreq a , WordFreq b) -> {
            return a.frequency - b.frequency;
        });
        
        
        Map<String , Integer> mp = new HashMap<>();
        
        for(int i = 0 ; i < input.length ; i ++ ) {
            mp.put(input[i] , mp.getOrDefault(input[i] , 0) + 1);
        }
        
        for(Map.Entry<String , Integer> entry : mp.entrySet()) {
            
            String key = entry.getKey();
            int value = entry.getValue();
            
            if(minPq.size() < k ) {
                minPq.offer(new WordFreq(key , value));
            } else {
                
                if(minPq.peek().frequency < value ) {
                    minPq.poll();
                    minPq.offer(new WordFreq(key , value));
                }
            }
        }
        
        
        
        List<String> ans = new ArrayList<>();
        populateList(minPq , ans);
        return ans;
        
    }
    
    public static void populateList(PriorityQueue<WordFreq> minPq , List<String> ans ) {
        
        while(!minPq.isEmpty()) {
            
            ans.add(minPq.poll().word);
        }
        
       Collections.reverse(ans);
       
    }
    
   
    
    
}


Time Complexity -> O(N + KlogK)
Space Complexity -> O(N)
