The first role for which i appeared got filled so  , i appeared again for the interview 
this was the second coding quesstion 

/*

You and your friends are driving to a Campground to go camping. Only 2 of you have cars, so you will be carpooling. 

Routes to the campground are linear, so each location will only lead to 1 location and there will be no loops or detours. Both cars will leave from their starting locations at the same time. The first car to pass someone's location will pick them up. If both cars arrive at the same time, the person can go in either car.

Roads are provided as a directed list of connected locations with the duration (in minutes) it takes to drive between the locations. 
[Origin, Destination, Duration it takes to drive]

Given a list of roads, a list of starting locations and a list of people/where they live, return a collection of who will be in each car upon arrival to the Campground.
------------------------------------------------------
Bridgewater--(30)-->Caledonia--(15)-->New Grafton--(5)-->Campground
                                       ^
Liverpool---(10)---Milton-----(30)-----^

roads1 = [
    ["Bridgewater", "Caledonia", "30"], <= The road from Bridgewater to Caledonia takes 30 minutes to drive.
    ["Caledonia", "New Grafton", "15"], 
    ["New Grafton", "Campground", "5"], 
    ["Milton", "New Grafton", "30"],
    ["Liverpool", "Milton", "10"]
]
starts1 = ["Bridgewater", "Liverpool"]
people1 = [
    ["Jessie", "Bridgewater"], ["Travis", "Caledonia"], 
    ["Jeremy", "New Grafton"], ["Katie", "Liverpool"]
]

Car1 path: (from Bridgewater): [Bridgewater(0, Jessie)->Caledonia(30, Travis)->New Grafton(45)->Campground(50)]
Car2 path: (from Liverpool): [Liverpool(0, Katie)->Milton(10)->New Grafton(40, Jeremy)->Campground(45)]

Output (In any order/format):
    [Jessie, Travis], [Katie, Jeremy]
--------------------------------------
Riverport->Chester->Campground
             ^
Halifax------^

roads2 = [["Riverport", "Chester", "40"], ["Chester", "Campground", "60"], ["Halifax", "Chester", "40"]]
starts2 = ["Riverport", "Halifax"]
people2 = [["Colin", "Riverport"], ["Sam", "Chester"], ["Alyssa", "Halifax"]]

Output (In any order/format):
    [Colin, Sam], [Alyssa] OR [Colin], [Alyssa, Sam]
----------------------------------------
Riverport->Bridgewater->Liverpool->Campground

roads3 = [["Riverport", "Bridgewater", "1"], ["Bridgewater", "Liverpool", "1"], ["Liverpool", "Campground", "1"]]
starts3_1 = ["Riverport", "Bridgewater"]
starts3_2 = ["Bridgewater", "Riverport"]
starts3_3 = ["Riverport", "Liverpool"]
people3 = [["Colin", "Riverport"], ["Jessie", "Bridgewater"], ["Sam", "Liverpool"]]

Output (starts3_1/starts3_2):  [Colin], [Jessie, Sam] - (Cars can be in any order)
Output (starts3_3): [Jessie, Colin], [Sam]
----------------------------------------
All Test Cases: (Cars can be in either order)
carpool(roads1, starts1, people1) => [Jessie, Travis], [Katie, Jeremy]
carpool(roads2, starts2, people2) => [Colin, Sam], [Alyssa] OR [Colin], [Alyssa, Sam]
carpool(roads3, starts3_1, people3) => [Colin], [Jessie, Sam]
carpool(roads3, starts3_2, people3) => [Jessie, Sam], [Colin]
carpool(roads3, starts3_3, people3) => [Jessie, Colin], [Sam]
----------------------------------------
Complexity Variable:
n = number of roads
*/

import java.io.*;
import java.util.*;
import javafx.util.Pair;
import jdk.internal.net.http.ResponseSubscribers.NullSubscriber;

public class Solution {
  public static void main(String[] argv) {
    String[][] roads1 = {
      {"Bridgewater", "Caledonia", "30"}, {"Caledonia", "New Grafton", "15"}, 
      {"New Grafton", "Campground", "5"}, {"Milton", "New Grafton", "30"},
      {"Liverpool", "Milton", "10"}
    };
    String[] starts1 = {"Bridgewater", "Liverpool"};
    String[][] people1 = {
      {"Jessie", "Bridgewater"}, {"Travis", "Caledonia"}, 
      {"Jeremy", "New Grafton"}, {"Katie", "Liverpool"}
    };

    String[][] roads2 = {{"Riverport", "Chester", "40"}, {"Chester", "Campground", "60"}, {"Halifax", "Chester", "40"}};
    String[] starts2 = {"Riverport", "Halifax"};
    String[][] people2 = {{"Colin", "Riverport"}, {"Sam", "Chester"}, {"Alyssa", "Halifax"}};

    String[][] roads3 = {{"Riverport", "Bridgewater", "1"}, {"Bridgewater", "Liverpool", "1"}, {"Liverpool", "Campground", "1"}};
    String[] starts3_1 = {"Riverport", "Bridgewater"};
    String[] starts3_2 = {"Bridgewater", "Riverport"};
    String[] starts3_3 = {"Riverport", "Liverpool"};
    String[][] people3 = {{"Colin", "Riverport"}, {"Jessie", "Bridgewater"}, {"Sam", "Liverpool"}};
    
    
    // System.out.println(difference(products , list1));
    // System.out.println(difference(products , list2));
    // System.out.println(difference(products , list3));
    // System.out.println(difference(products , list4));
    // System.out.println(difference(products , list5));
    
    
    
    
  }
  
  static class Edge {
    
    String v;
    int duration;
    
    public Edge(String v , int duration ) {
      
      this.v = v;
      this.duration = duration;
    }
  }
  
  public static List<List<String>> solution(String[][] roads  , String[] starts ,String[][] people  ) {
    
    
   
    Map<String , Edge> graph = new HashMap<>();
    
    for(int i = 0 ; i < roads.length ; i ++ ) {
      
      String u = roads[i][0];
      String v = roads[i][1];
      int duration = Integer.parseInt(roads[i][2]);
      
      graph.put(u , new Edge(v , duration));
    }
    
    String loc1 = starts[0];
    String loc2 = starts[1];
    
    String[] rider1 = startRiders(people , loc1);
    String[] rider2 = startRiders(people , loc2);
    
    Map<String , Integer > locationToMinimumTimeMap = new HashMap<>();
    
    
  }
  
  static class  X {
    
    String location ;
    int time ;
    
    public X(String location , int time) {
      
      this.location = location;
      this.time = time;
    }
  }
  
  
  
  public static void traverse(Map<String , Edge> graph  , Map<String , List<Integer>> locationToMinimumTimeMap,
   String[] rider ) {
    
    
    Queue<X> q = new Queue<>();
    q.push(new X(rider[1] , 0));
    
    while(!q.isEmpty()) {
      
      X x = q.poll();
      String currentLocation = x.location;
      
      
      if(locationToMinimumTimeMap.containsKey(currentLocation)) 
      
    }
    
  }
  
  public static String[] startRiders(String[][] people , String loc) {
    
    String rider = "";
    
    for(int i = 0 ; i < people.length ; i ++ ) {
      if(people[i][1] == loc) {
        return people[i];
      }
    }
    
    return null;
  }
  
  
  
  
}
