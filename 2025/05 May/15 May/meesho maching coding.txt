Design thread safe single dimension Uber 

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.*;

/****
 *
 *  question is
 *  given a straight line plane 1 to K these are positions
 *
 *  requirements
 *
 *  on these k positions cabs are assigned randomly initially ,
 *
 *  Now given a userLocation on the plane any x position , you have a startLoc and endLoc
 *
 *  find the nearest driver -> i used segment tree to find the nearest driver
 *  and binary search to find the nearest driver
 *
 *  and then pick that driver out of the map ,
 *  and make it unavailable
 *
 *  and then again put it back on the map ,
 *  when they click on the end Ride but at the new position
 *
 *  the entire question was to make it thread safe ,
 *  I realized my hold on Reentrant lock is pretty weak
 *
 *  and the interviewer told me I  could use a reentrant read Write lock
 *  on the segment tree instead of blocking the segment tree entirely
 *  That was an amazing info
 *
 *  Now that i think of it ,
 *  i can apply reenterant lock
 *  for reading purpose i can use optimistic locking
 *  and for writing the locking should happen ,
 *  but I want to explore it more , 
 *  there are lot of loopholes and the best way to explore this is
 *  by trying locking on Segment tree
 *
 *
 * ***/
public class Solution {

    /**
     *
     * plan -> Map<Integer , List<Cabs>>
     * */

    private int[] plane;
    final static String USER = "USER";
    final static String CAB = "CAB";
    final static String TRIP = "TRIP";
    static volatile int tripNumber = 0;


    static class Trip {

        String tripId;
        String userId;
        String cabId;
        int startPoint;
        int endPoint;
        int fair;

        public Trip(String tripId , String userId, String cabId , int startPoint , int endPoint, int fair) {
            this.tripId = tripId;
            this.userId = userId;
            this.cabId = cabId;
            this.startPoint = startPoint;
            this.endPoint = endPoint;
            this.fair = fair;
        }

    }

    static class Application {

        private CabManager cabManager;
        int n , k , r , chargePerKm;

        public Application(int n , int k , int r , int chargePerKm ) {
            cabManager = new CabManager(k , r ,chargePerKm , new NearestCabAssignmentStrategy());
            this.n = n;
            this.k = k;
            this.r = r;
            this.chargePerKm = chargePerKm;
        }

        public void init() {

            Random random = new Random();

            for(int i = 1 ; i <= n ; i ++ ) {
                int position = random.nextInt(1 , k + 1);
                System.out.println(position);
                cabManager.addNewCab(position ,  CAB + i , position , true);
            }

        }

        public Trip bookCab(String userId, int location , int startPoint , int endPoint ) {
            Cab cab = cabManager.findCab(location);
            return cabManager.bookCab(cab , userId ,startPoint , endPoint);
        }

        public Trip endRide(String tripId) {

            Trip trip = cabManager.endRide(tripId);
            return trip;
        }


    }

    static class TripManager {

        Map<String , Trip> tripIdToTripMap;
        final int chargePerKm;
        public TripManager(int chargePerKm) {
            tripIdToTripMap = new HashMap<>();
            this.chargePerKm = chargePerKm;
        }

        public Trip createTrip(String tripId , String userId, String cabId , int startPoint , int endPoint, int fair) {

            fair = (endPoint - startPoint + 1)*chargePerKm;
            Trip trip = new Trip(TRIP + tripNumber , userId , cabId , startPoint , endPoint , fair);
            tripIdToTripMap.put(trip.tripId , trip);
            return trip;
        }

        public Trip removeTrip(String tripId) {

            Trip trip = tripIdToTripMap.get(tripId);
            tripIdToTripMap.remove(tripId);
            return trip;
        }
    }

    static class SparseSegmentTree {

        static class Node {

            int val;
            Node left;
            Node right;

            public Node() {

            }
        }

        Node root ;
        int L , R , def;

        public SparseSegmentTree(int L , int R , int def) {
            root = new Node();
            this.L = L;
            this.R = R;
            this.def = def;
        }

        private void updatePoint(int start , int end , int index , int value , Node node ) {

            synchronized (node) {

            }
            if(start == end ) {
                node.val += value;
                return ;
            }

            int mid = (start + end)/2;
            if(index  <= mid ) {
                if(node.left == null ) {
                    node.left = new Node();
                }
                updatePoint(start , mid , index , value , node.left);
            } else {
                if(node.right == null) {
                    node.right = new Node();
                }
                updatePoint(mid + 1 , end , index ,  value , node.right);
            }


            int leftVal = node.left != null ? node.left.val : def;
            int rightVal = node.right != null ? node.right.val : def;

            node.val = leftVal + rightVal;

        }

        public void update(int index , int value ) {
            updatePoint(L , R , index , value , root);
        }

        private int queryRange(int start , int end , int l , int r , Node node) {

            if(l > end || r < start || node == null ) {
                return def;
            }

            if(l <= start && end <= r ) {
                return node.val;
            }

            int leftVal = node.left != null ? node.left.val : def;
            int rightVal = node.right != null ? node.right.val : def;

            node.val = leftVal + rightVal;
            return node.val;
        }

        public int query(int l , int r ) {
            return queryRange(L , R , l , r , root);
        }

    }

    static class CabManager {

        private Map<Integer , List<Cab>> positionToCabListMap;
        private SparseSegmentTree sparseSegmentTree;
        private final CabAssignmentStrategy cabAssignmentStrategy;
        private final TripManager tripManager;
        private final int radius;
        private final int k;
        private final int chargePerKm;

        public CabManager(int k , int radius , int chargePerKm, final CabAssignmentStrategy cabAssignmentStrategy  ) {
            positionToCabListMap = new ConcurrentHashMap<>();
            sparseSegmentTree = new SparseSegmentTree(1 , k, 0);
            this.cabAssignmentStrategy = cabAssignmentStrategy;
            this.k = k;
            this.radius = radius;
            this.chargePerKm = chargePerKm;
            this.tripManager = new TripManager(chargePerKm);
        }


        public void addNewCab(int position , String cabId  , int cabPosition , boolean isAvailable ) {

            Cab cab = new Cab(cabId , cabPosition , isAvailable);
            positionToCabListMap.computeIfAbsent(position , (Integer key)  -> new ArrayList<>());
            positionToCabListMap.get(position).add(cab);
            sparseSegmentTree.update(position , 1);
        }

        public Cab findCab(int customerPosition ) {

            int cabPosition = cabAssignmentStrategy.getCabPosition(customerPosition , radius , sparseSegmentTree);
            System.out.println(cabPosition);
            Cab cab = null;
            if(cabPosition == -1 ) {
                return cab;
            }
            synchronized (positionToCabListMap.get(cabPosition)) {

                int numberOfCabsThere = Objects.nonNull(positionToCabListMap.get(cabPosition)) ?
                        positionToCabListMap.get(cabPosition).size() : 0;

                if(numberOfCabsThere == 0 ) {
                    return null;
                }

                Random random = new Random();
                int cabToPick = random.nextInt(0 , numberOfCabsThere);
                cab = positionToCabListMap.get(cabPosition).get(cabToPick);
            }

            return cab;
        }

        public synchronized Trip bookCab(Cab cab , String userId , int startPosition , int endPositon) {

            if(cab == null ) {
                return null;
            }
            if(!cab.isAvailable) {
                return null;
            }
            sparseSegmentTree.update(startPosition , -1);
            positionToCabListMap.get(startPosition).remove(cab);

            tripNumber++;
            Trip trip = tripManager.createTrip(TRIP + tripNumber , userId , cab.cabId , startPosition , endPositon , 0 );

            return trip;
        }

        public Trip endRide(String tripId) {

            Trip trip = tripManager.removeTrip(tripId);
            int endPosition = trip.endPoint;

            synchronized (this) {
                sparseSegmentTree.update(endPosition , +1);
            }

            return trip;
        }





    }

    interface CabAssignmentStrategy {

        public int getCabPosition(int customerPosition , int radius , SparseSegmentTree sparseSegmentTree);
    }

    static class NearestCabAssignmentStrategy implements CabAssignmentStrategy {

        public int getCabPosition(int customerPosition , int radius , SparseSegmentTree sparseSegmentTree) {

            int lo = customerPosition;
            int hi = Math.min( customerPosition + radius , sparseSegmentTree.R );
            int posi = -1;
            while(lo <= hi ) {

                int mid = (lo + hi)/2;

                int val = sparseSegmentTree.query(customerPosition , mid);
                if(val >= 1 ) {
                    posi = mid;
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                }
            }

            if(posi == -1 ) {

                hi = customerPosition;
                lo = Math.max(sparseSegmentTree.L , customerPosition -  radius);

                while(lo <= hi ) {

                    int mid = (lo + hi)/2;
                    int val = sparseSegmentTree.query(mid , customerPosition);

                    if(val >= 1 ) {
                        posi = mid;
                        lo = mid + 1;
                    } else {
                        hi = mid - 1;
                    }
                }
            }

            return posi;

        }
    }



    static class Cab {
        String cabId;
        int cabPosition;
        boolean isAvailable;

        public Cab(String cabId , int cabPosition , boolean isAvailable) {
            this.cabId = cabId;
            this.cabPosition = cabPosition;
            this.isAvailable = isAvailable;
        }

        @Override
        public int hashCode() {
            return Objects.hash(cabId ,  cabPosition , isAvailable);
        }

        @Override
        public boolean equals(Object o) {

            if(o == null) {
                return false;
            }
            if(!(o instanceof Cab)) {
                return false;
            }

            Cab c = (Cab) o;

            return this.cabId == c.cabId
                    && this.cabPosition == c.cabPosition
                    && this.isAvailable == c.isAvailable;
        }
    }





    public static void main(String args[] ) throws Exception {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */

        int n = 10;
        int k = 100;
        int r = 5;
        int chargePerKm = 10;
        Application application = new Application(n , k , r , chargePerKm);
        application.init();

        Trip trip = application.bookCab("user1" , 5 , 5  , 50);

        System.out.println("cab assingment done\n\n");
        if(trip == null ) {
            System.out.println("no nearby drivers available please try again");
        } else {
            System.out.println("tripId : " + trip.tripId + " , " + "cabId : " + trip.cabId);
        }
//        application.endRide("trip1");
    }




}
